using DfE.FindInformationAcademiesTrusts.Data.Enums;
using DfE.FindInformationAcademiesTrusts.Data.FiatDb.Models;
using Microsoft.EntityFrameworkCore;

namespace DfE.FindInformationAcademiesTrusts.Data.FiatDb.UnitTests.Contexts;

public class FiatDbContextTests(FiatDbContainerFixture fiatDbContainerFixture) : BaseFiatDbTest(fiatDbContainerFixture)
{
    [Fact]
    public void Contacts_should_have_autogenerated_id_column()
    {
        FiatDbContext.TrustContacts.AddRange(
            new TrustContact
            {
                Name = "My TrustRelationshipManager",
                Email = "my.TrustRelationshipManager@education.gov.uk",
                Uid = 1,
                Role = TrustContactRole.TrustRelationshipManager
            },
            new TrustContact
            {
                Name = "My TrustRelationshipManager2",
                Email = "my.TrustRelationshipManager2@education.gov.uk",
                Uid = 2,
                Role = TrustContactRole.TrustRelationshipManager
            },
            new TrustContact
            {
                Name = "My TrustRelationshipManager3",
                Email = "my.TrustRelationshipManager2@education.gov.uk",
                Uid = 3,
                Role = TrustContactRole.TrustRelationshipManager
            });

        FiatDbContext.SaveChanges();

        FiatDbContext.TrustContacts.Select(c => c.Id).Should().OnlyHaveUniqueItems();
    }

    [Fact]
    public void Contacts_should_have_autogenerated_last_modified_column()
    {
        var entry = FiatDbContext.TrustContacts.Add(new TrustContact
        {
            Name = "My TrustRelationshipManager",
            Email = "my.TrustRelationshipManager@education.gov.uk",
            Uid = 1234,
            Role = TrustContactRole.TrustRelationshipManager
        }).Entity;

        FiatDbContext.SaveChanges();

        entry.LastModifiedAtTime.Should().BeCloseTo(DateTime.UtcNow, TimeSpan.FromSeconds(1));
    }

    [Fact]
    public void Contacts_should_have_unique_uid_role_combinations()
    {
        FiatDbContext.TrustContacts.Add(new TrustContact
        {
            Name = "My TrustRelationshipManager",
            Email = "my.TrustRelationshipManager@education.gov.uk",
            Uid = 1234,
            Role = TrustContactRole.TrustRelationshipManager
        });
        FiatDbContext.TrustContacts.Add(new TrustContact
        {
            Name = "other TrustRelationshipManager",
            Email = "other.TrustRelationshipManager@education.gov.uk",
            Uid = 1234,
            Role = TrustContactRole.TrustRelationshipManager
        });

        var action = () => FiatDbContext.SaveChanges();

        action.Should().Throw<DbUpdateException>();
    }

    [Fact]
    public async Task Contacts_should_retain_history_of_changes()
    {
        var entry = FiatDbContext.TrustContacts.Add(new TrustContact
        {
            Name = "original name",
            Email = "original.email@education.gov.uk",
            Uid = 1234,
            Role = TrustContactRole.TrustRelationshipManager
        }).Entity;

        await FiatDbContext.SaveChangesAsync();

        // ensure that some time has passed before updating the entity because the temporal table will overwrite entries
        // with the same timestamp, causing this test to be flaky
        await Task.Delay(10);

        entry.Name = "new name";

        await FiatDbContext.SaveChangesAsync();
        await Task.Delay(10);

        entry.Email = "new.email@education.gov.uk";

        await FiatDbContext.SaveChangesAsync();
        await Task.Delay(10);

        var allVersions = await FiatDbContext.TrustContacts.TemporalAll().Where(c => c.Uid == 1234).ToArrayAsync();

        allVersions.Should().Satisfy(
            [
                contact => contact.Name == "original name" && contact.Email == "original.email@education.gov.uk",
                contact => contact.Name == "new name" && contact.Email == "original.email@education.gov.uk",
                contact => contact.Name == "new name" && contact.Email == "new.email@education.gov.uk"
            ]
            , $"there should be three versions of the history in {string.Join(", ", allVersions.Select(c => $"[{c.Name}, {c.Email}, {c.LastModifiedAtTime:O}]"))}");
    }
}
